<MissionEditor.Mission Version="0.60">
  <UserData>
    <PerMissionState>
      <MapView ViewCenterX="2529.034" ViewCenterY="-8519.122" ViewScale="1.3042" ViewRotation="0" />
    </PerMissionState>
  </UserData>
  <MissionProperties AlternativeSetup2Description="" AlternativeSetup2Name="" AlternativeSetup1Description="" AlternativeSetup1Name="" AlternativeSetup0Description="" AlternativeSetup0Name="" DLCBitMask="0" InitialWeather="0" Time="01/01/2000 12:00:00" MultiplayerDescription="" MultiplayerAttackingArmy="0" MultiplayerModes="0" MultiplayerMaxServerBandwidth="2048" MultiplayerMaxPlayers="16" EnemyIntel="#ofp_missint_defaulte" FriendlyIntel="#ofp_missint_defaultf" Debriefing="#ofp_missdeb_default" DetailedBriefing="#ofp_missbrief_default" MultiplayerArenaSubdivisions="5, 5" MultiplayerArenaWarningSize="200" MultiplayerArenaSize="1500, 1500" MultiplayerArenaCenter="16000, -8000" MapImageSize="4000" MapImageCenter="16000, -8000" MissionImagePath="" Description="#ofp_missdesc_default" Group="Mission Editor" Name="#ofp_missname_default" />
  <MarkerManager>
    <MarkerAspectManagers></MarkerAspectManagers>
    <Markers>
      <Marker SerializationID="1" Name="Startup" TemplateID="64079280547853478" TemplateName="EntitySet" X="0" Y="0">
        <EntityProperties ParentEntitySetID="0" Description="" />
        <EntitySetProperties Active="True" Exportable="True" />
      </Marker>
      <Marker SerializationID="2" Name="levelScript" TemplateID="130338588799821875" TemplateName="levelScript" X="-77.09756" Y="-2996.972">
        <EntityProperties ParentEntitySetID="1" Description="" />
        <LuaScriptProperties ScriptName="level">
          <Script>--[[
We only need to use the level script for some basic configuration of the EDX.
The EDX retroutes some of the games event handlers so they can be used on secondary scripts.
Because of this it is strongly recommended that you not use the level script to code any elements
of your mission.  If you do so and things do not work, you were warned!
]]--

DEBUG = true --this enables the built in EDX debugging mechanism and generates a file in the main game directory called "EDX DEBUG.txt"

DISPLAY = true --this enables the on screen debug message display linked to the EDX debugger.  If DEBUG is false this will be inactive as well.

logEdexToFile = false --this enables the internal logging for the EDX itself and is not necessary for mission creators.

disableEdexTimer = false --this disables the EDX timing mechanism which inturn will disable the EDX timers and hotkeys.  Keep false unless you have a good reason to deactivate them.


</Script>
        </LuaScriptProperties>
      </Marker>
      <Marker SerializationID="3" Name="missionScript" TemplateID="59584148284663864" TemplateName="secondaryScript" X="-79.80197" Y="-2834.708">
        <EntityProperties ParentEntitySetID="1" Description="" />
        <LuaScriptProperties ScriptName="mission">
          <Script>

function onEDXInitialized()
	EDX:registerPlayer("playera")
	--EDX:registerPlayable("", false)
end

function onMissionStart()	
	EDX:setTimeOfDay(00, 00, 00)
	--EDX:setRandomTime()
	
	EDX:setWeatherCurrent("clear")
	EDX:setFogCurrent(0)
	--EDX:setRandomWeather()
	--EDX:randomizeWeather(30)
	
	
---------------------------------------------------------------------------------------------
-----------------------------------This is how to create automated sam missile objects-------

	sam1 = EDX:newSAM("sam",0); --creates the sam object and returns an samID to the sam1 variable 
	EDX:setSAMAmmo(sam1, 8); ----overrides the default unlimited ammo with 4 missiles
	
	sam2 = EDX:newSAM("sami1",0); 
	EDX:setSAMAmmo(sam2, 8);
	
	sam2 = EDX:newSAM("sami2",0); 
	EDX:setSAMAmmo(sam2, 8);
	
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
	
	activeMissile = -1;
end

function numpadMult()
	EDX:detonateMissile(activeMissile)
end


function numpad0()
	EDX:setSAMActive(sam1,true);
	EDX:setSAMActive(sam2,true);
end

function numpad1()
	EDX:setSAMActive(sam1,false);
	EDX:setSAMActive(sam2,false);
end
</Script>
        </LuaScriptProperties>
      </Marker>
      <Marker SerializationID="4" Name="missileScript" TemplateID="59584148284663864" TemplateName="secondaryScript" X="29000.44" Y="-3000.42">
        <EntityProperties ParentEntitySetID="1" Description="" />
        <LuaScriptProperties ScriptName="missileMod">
          <Script>--[[				Missile mod v001 by
       ___         ___                     ___          ___          ___          ___          ___          ___     
      /\  \       /\__\         ___       /\  \        /\  \        /\  \        /\  \        /\__\        /\  \    
      \:\  \     /:/  /        /\  \     /::\  \      /::\  \      /::\  \      /::\  \      /:/  /       /::\  \   
       \:\  \   /:/  /         \:\  \   /:/\:\  \    /:/\:\  \    /:/\:\  \    /:/\:\  \    /:/  /       /:/\ \  \  
       /::\  \ /:/__/  ___     /::\__\ /:/  \:\  \  /:/  \:\  \  /::\~\:\  \  /:/  \:\  \  /:/  /  ___  _\:\~\ \  \ 
      /:/\:\__\|:|  | /\__\ __/:/\/__//:/__/_\:\__\/:/__/ \:\__\/:/\:\ \:\__\/:/__/ \:\__\/:/__/  /\__\/\ \:\ \ \__\
     /:/  \/__/|:|  |/:/  //\/:/  /   \:\  /\ \/__/\:\  \ /:/  /\/_|::\/:/  /\:\  \ /:/  /\:\  \ /:/  /\:\ \:\ \/__/
    /:/  /     |:|__/:/  / \::/__/     \:\ \:\__\   \:\  /:/  /    |:|::/  /  \:\  /:/  /  \:\  /:/  /  \:\ \:\__\  
    \/__/       \::::/__/   \:\__\      \:\/:/  /    \:\/:/  /     |:|\/__/    \:\/:/  /    \:\/:/  /    \:\/:/  /  
                 ~~~~        \/__/       \::/  /      \::/  /      |:|  |       \::/  /      \::/  /      \::/  /   
                                          \/__/        \/__/        \|__|        \/__/        \/__/        \/__/    
]]

--Below are examples of all of the event handlers fired by the missileMod script. You can use these on any script!

function onSAMLock(samID,targetName)
	OFP:displaySystemMessage("SAM "..samID.." has locked on to "..targetName);
end

function onSAMFiring(samID,targetName,missileID)
	OFP:displaySystemMessage("SAM "..samID.." has fired on "..targetName.." with missile "..missileID);
end

function onEnterSAMRange(samID,targetName)
	OFP:displaySystemMessage("Helicopter "..targetName.." has entered the range of SAM "..samID);
end

function onMissileHitTarget(targetName)
	OFP:displaySystemMessage("Missile has hit "..targetName);
	if OFP:isAlive(targetName) then
		--[[
		--This is an alternative that allows the helicopter to take a couple of shots with lesser damage
		if not OFP:isTailRotorDestroyed(targetName) then
			OFP:damageVehicle(targetName,"tailrotor");
			OFP:damageVehicle(targetName,"firepower");
		elseif not OFP:isMainRotorDestroyed(targetName) then
			OFP:damageVehicle(targetName,"mainrotor");
		else
			OFP:destroyVehicle(targetName);
		end
		]]
		OFP:destroyVehicle(targetName); --default action when a missile hits its target
	end
end

function onMissileHitGround(x,y,z)
	OFP:displaySystemMessage("Missile has hit the ground at "..x..", "..y..", "..z);
end

function onSAMOutOfAmmo(samID)
	OFP:displaySystemMessage("SAM "..samID.." has run out of missiles!");
end

function onSAMDestroyed(samEntity,killer)
	OFP:displaySystemMessage("SAM missile entity "..samEntity.." has been destroyed by "..killer);
end

-----------------------------------------------------------------------------
-----------------------------------------------------------------------------

--GLOBAL SCRIPT PARAMETERS
LOCK_TIME = 8; --Time required for SAM's to get an initial lock on a target
FIRE_DELAY = 5; --Delay from lock to actual fire time

--[[***************************************************************************************************
----------------------------------DO NOT EDIT BELOW THIS POINT!!!!-------------------------------------
*****************************************************************************************************]]

INFO = "Missile Mod v001 by tvig0r0us";

function onEDXInitialized()
	-------------------------------FUNCTIONS AVAILABLE TO OTHER SCRIPTS VIA EDX:functionCall()----------
	
	--Fires a missile from entity or position named
	--Params: missileName- An entity name, table of x,y,z coordinates or samID to fire a missile from
	--		target- the name of a target for a missile to track
	--		reqLOS- whether or not to require line of sight to fire missile (true/false)
	function EDX:fireSAM(missileName,target,reqLOS)
		local _samName = missileName;
		if type(_samName) == "number" then
			if sams[_samName] then
				_samName = sams[_samName];
			else
				debugInfo = "fireSam[WARNING]: Invalid missileName";
				return debugInfo;
			end
		end
		if reqLOS and EDX:isInLOS(_samName,target) then
			return fireMissile("X_IMPT_EXPL_Master1_Small",_samName,target,150);
		elseif not reqLOS then
			return fireMissile("X_IMPT_EXPL_Master1_Small",_samName,target,150);
		end
	end
	
	--Will detonate a missile in flight 
	--Params: missileID- ID from event handler or fireSAM function
	function EDX:detonateMissile(missileID)
		if not effects[missileID] then
			debugInfo = "detonateMissile[WARNING]: Invalid missileID";
			return debugInfo;
		else
			effects[missileID].ground = true;
			return true;
		end
	end
	
	--Returns a lua object containing the data for a script created SAM by samID
	--Params: samID- the samID retuned by newSam and several script event handlers
	function EDX:getSAMObject(samID)
		if not sams[samID] then
			debugInfo = "getSAMObject[WARNING]: Invalid samID";
			return debugInfo;
		else
			return sams[samID];
		end
	end
	
	--Creates a new lua object for the samName passed
	--Params: samName- can be any object
	--		targetSide- The side to set the automated targeting system 0=US 1=PLA
	function EDX:newSAM(samName,targetSide)
		return newSAM(samName,targetSide);
	end
	
	--Sets the side for a sam missile to target
	--Params: samID- the samID retuned by newSam and several script event handlers
	--		targetSide- The side to set the automated targeting system 0=US 1=PLA
	function EDX:setSAMEnemySide(samID,targetSide)
		if not sams[samID] then
			debugInfo = "setSAMEnemySide[WARNING]: Invalid samID";
			return debugInfo;
		else
			sams[samID].ts = targetSide;
			return true;
		end
	end
	
	--Sets a sam's active targeting
	--Params: samID- the samID retuned by newSam and several script event handlers
	--		active- true or false  default is true
	function EDX:setSAMActive(samID,active)
		local _act = active;
		if _act == nil then _act = true end 
		if not sams[samID] then
			debugInfo = "setSAMActive[WARNING]: Invalid samID";
			return debugInfo;
		else
			sams[samID].active = _act;
			return true;
		end
	end
	
	--Sets the total number of missiles a sam can fire
	--Params: samID- the samID retuned by newSam and several script event handlers
	--		ammoCount- the number of missiles  default = -1(unlimited)
	function EDX:setSAMAmmo(samID,ammoCount)
		if not sams[samID] then
			debugInfo = "setSAMAmmo[WARNING]: Invalid samID";
			return debugInfo;
		else
			sams[samID].ammo = ammoCount;
			return true;
		end
	end
	
	--Removes a sam missile script object from the game (not the entity it was assigned to)
	--Params: samID- the samID retuned by newSam and several script event handlers
	function EDX:deleteSAM(samID)
		if not sams[samID] then
			debugInfo = "deleteSAM[WARNING]: Invalid samID";
			return debugInfo;
		else
			OFP:destroyEntitySet(sams[samID].trigID);
			samTrigs[sams[samID].trig] = nil;
			sams[samID] = nil;
			return true;
		end
	end
	

----------------------------------reinitialize functions on mission checkpoint load
	if effects then
		for i,v in pairs(effects) do
			v.move = move;
		end
	end
	if sams then
		for i,v in pairs(sams) do
			v.fire = fire;
		end
	end
end

function onMissionStart()
	spawned = {};
	effects = {};
	sams = {};
	samTrigs = {};
	tt = OFP:getMissionTime() + 1000;
	fc = 0;
	lf = 0;
	fps = 60;
	ID = 0;
end

function getNewID()
	ID = ID+1;
	return ID;
end

function updateFrame(currentTime, frameNo)
	fc = fc + 1
	if currentTime &gt;= tt and fc &gt; lf then
		fps = fc - lf
		lf = fc
		tt = currentTime + 1000
	end
	for _,fx in pairs(effects) do
		fx:move();
	end
end

function fireMissile(effectName,startPos,target,speed)
	effect = {};
	effect.fx = effectName;
	effect.spd = speed;
	effect.tar = target;
	effect.ey = ey;
	effect.ez = ez;
	if type(startPos) == "table" then
		effect.pos = startPos;
		effect.start = startPos;
	elseif type(startPos) == "string" and OFP:getDistance(startPos,startPos) ~= -1 then
		local sx,sy,sz = OFP:getPosition(startPos);
		if debug:getTemplateName(startPos) == "ev12sama" then
			sy = sy + 2.5;
		end
		effect.pos = {sx,sy,sz};
		effect.start = {sx,sy,sz};
	end
	effect.ID = getNewID();
	effect.sets = {};
	OFP:playOneShotSound ("flashpoint2", "WpnFX", "BY_ATM", effect.pos[1],effect.pos[2],effect.pos[3]);
	effect.move = move;
	effects[effect.ID] = effect;
	return effect.ID;
end
	
function move(self)
	local travelDist = self.spd/fps;
	local x,y,z = unpack(self.pos);
	local sx,sy,sz = unpack(self.start);
	local tx, ty, tz;
	local nx, ny, nz;
	if type(self.tar) == "table" then
		tx, ty, tz = unpack(self.tar)
	elseif type(self.tar) == "string" then
		tx, ty, tz = OFP:getPosition(self.tar)
	end
	if EDX:get3dDistance(x, y, z, tx, ty, tz) &lt;= travelDist and not self.hit then
		self.hit = true
	elseif self.hit then
		if #self.sets &gt; 0 then
			OFP:destroyEntitySet(self.sets[1]);
			table.remove(self.sets,1);
		else
			EDX:distributeFunction("onMissileHitTarget",self.tar);
			effects[self.ID] = nil;
			--OFP:displaySystemMessage("Target reached!!")
		end
	elseif self.ground then
		if #self.sets &gt; 0 then
			OFP:destroyEntitySet(self.sets[1]);
			table.remove(self.sets,1);
		else
			EDX:distributeFunction("onMissileHitGround",x,y,z);
			effects[self.ID] = nil;
			--OFP:displaySystemMessage("Missile collided with ground!!")
		end
	else
		local da = EDX:get3dDistance(x, y, z, tx, ty, tz)
		local db = EDX:get2dDistance(x, z, tx, tz)
		local dc = ty - y
		local tb = EDX:getBearing(x, z, tx, tz)
		local ratio = travelDist/da
		local dxz = db * ratio
		local dy = dc * ratio
		nx, ny, nz = EDX:get360Coordinates({x, y, z},tb,0,dxz)
		ny = y + dy
		local terrainHeight = OFP:getTerrainHeight(nx, nz)
		local sDist = EDX:get3dDistance(x, y, z, sx, sy, sz)
		if  sDist &lt;= 10 then
			ny = y + .4;
		elseif ny &lt;= terrainHeight then
			self.ground = true;
			ny = terrainHeight - 1;
		end
		
		self.pos = {nx,ny,nz};
		if EDX:getEntity3dDistance(EDX:getPlayerLeader(),nx,ny,nz) &lt;= 2000 then
			local sid = OFP:spawnEntitySetAtLocation("ssamfxwp",nx,ny-1,nz);
			self.sets[#self.sets+1] = sid;
			spawned[sid] = self.ID;
		end
	end
end

function newSAM(samName,targetSide)
	local samObj = {};
	samObj.nm = samName;
	samObj.ts = targetSide;
	samObj.ammo = -1;--default to unlimited ammo count on creation of sam object
	samObj.active = true;
	samObj.tar = {};
	samObj.ID = getNewID();
	local x,y,z = OFP:getPosition(samName);
	local sid = OFP:spawnEntitySetAtLocation("ssamtrig",x,y,z);
	samObj.trigID = sid;
	spawned[sid] = samObj.ID;
	sams[samObj.ID] = samObj;
	return samObj.ID;
end

function missileLock(samID,targetName,timerID)
	if sams[samID] then
		local sam = sams[samID];
		local tar = sam.tar[targetName];
		if not sam.active or sam.ammo == 0 then
			EDX:setTimer(timerID,1000);
			tar.lock = 0;
			return;
		end
		if OFP:isAlive(targetName) and OFP:isInTrigger(targetName,sam.trig) and OFP:getSide(targetName) == sam.ts then
			tar.lock = tar.lock + 1;
			if not EDX:isInLOS(sam.nm,targetName) and tar.lock &lt; LOCK_TIME then
				tar.lock = 0;
			end
			if tar.lock &gt; LOCK_TIME + FIRE_DELAY then
				if sam.ammo &gt; 0 then
					sam.ammo = sam.ammo - 1;
					if sam.ammo == 0 then
						EDX:distributeFunction("onSAMOutOfAmmo",sam.ID)
					end
				end
				local mis = fireMissile("X_IMPT_EXPL_Master1_Small",sam.nm,targetName,150);
				EDX:distributeFunction("onSAMFiring",samID,targetName,mis);
				if EDX:isInLOS(sam.nm,targetName) then
					tar.lock = LOCK_TIME;
				else
					tar.lock = 0;
				end
			elseif tar.lock == LOCK_TIME then
				EDX:distributeFunction("onSAMLock",samID,targetName);
			end
		else
			sam.tar[targetName] = nil;
			EDX:deleteTimer(timerID);
			return;
		end
	else
		EDX:deleteTimer(timerID);
		return;
	end
	EDX:setTimer(timerID,1000);
end

function newTarget(samObject,targetName)
	local tar = {};
	tar.lock = 0;
	tar.timer = EDX:serialTimer("missileLock",1000,samObject.ID,targetName);
	samObject.tar[targetName] = tar;
end

function onEnter(zoneName, unitName)
	if samTrigs[zoneName] and OFP:getBroadUnitCategory(unitName) == "BROAD_UNIT_AIRCRAFT" then
		local sam = sams[samTrigs[zoneName]];
		if OFP:getSide(unitName) == sam.ts then
			newTarget(sam,unitName);
			EDX:distributeFunction("onEnterSAMRange",sam.ID,unitName);
		end
	end
end

function onMount(vehicleName, unitName, echelonName)
	if OFP:getBroadUnitCategory(vehicleName) == "BROAD_UNIT_AIRCRAFT" then
		for i,v in pairs(sams) do
			if OFP:isInTrigger(vehicleName,v.trig)
			and OFP:getSide(vehicleName) == v.ts
			and not v.tar[vehicleName] then
				newTarget(v,vehicleName);
				EDX:distributeFunction("onEnterSAMRange",v.ID,vehicleName);
			end
		end
	end
end

function onPlaceableKill(placeable, attacker)
	for i,v in pairs(sams) do
		if v.nm == placeable then
			EDX:distributeFunction("onSAMDestroyed",placeable,attacker)
			samTrigs[v.trig] = nil;
			OFP:destroyEntitySet(v.trigID);
			sams[i] = nil;
		end
	end
end

function onSpawnedReady(setName, setID, tableOfEntities, errorCode)
	if not spawned[setID] then return end
	if setName == "ssamfxwp" then
		local fx = effects[spawned[setID]];
		local x,y,z = OFP:getPosition(tableOfEntities[1]);
		if fx.ground or fx.hit then
			OFP:doParticleEffect("X_EXPL_MISS_Master1_Med",tableOfEntities[1]);
			OFP:playOneShotSound ("flashpoint2", "EXP", "explosion", fx.pos[1],fx.pos[2],fx.pos[3]);
		else
			OFP:doParticleEffect(fx.fx,tableOfEntities[1]);
		end
		OFP:destroyEntitySet(fx.sets[1]);
		table.remove(fx.sets,1);
	elseif setName == "ssamtrig" then
		local sam = sams[spawned[setID]];
		sam.trig = tableOfEntities[1];
		samTrigs[sam.trig] = sam.ID;
	end
	spawned[setID] = nil;
end



function numpadDiv()
	EDX:saveTable(effects,nil,"MissileEffects.lua")
	EDX:saveTable(sams,nil,"Sams.lua")
end</Script>
        </LuaScriptProperties>
      </Marker>
      <Marker SerializationID="5" Name="fxwp" TemplateID="130425489857996851" TemplateName="waypoint" X="29000.29" Y="-2990.182">
        <EntityProperties ParentEntitySetID="6" Description="" />
        <GroupMemberProperties />
        <TransformProperties GameMatrix="-1, 0, 8.742278E-08, 0, 0, 1, 0, 0, -8.742278E-08, 0, -1, 0, 29000.29, 0, -2990.182, 1" AltitudeMode="SeaLevel" />
        <WaypointProperties RapidMove="False" BlockerLogic="And" Delay="0" UserScript="" />
      </Marker>
      <Marker SerializationID="6" Name="ssamfxwp" TemplateID="64079280547853478" TemplateName="EntitySet" X="0" Y="0">
        <EntityProperties ParentEntitySetID="0" Description="" />
        <EntitySetProperties Active="False" Exportable="True" />
      </Marker>
      <Marker SerializationID="7" Name="sam" TemplateID="66932992621459616" TemplateName="ev12sama" X="3014.355" Y="-8143.234">
        <EntityProperties ParentEntitySetID="1" Description="" />
        <TransformProperties GameMatrix="0.2923716, 0, -0.9563055, 0, 0, 1, 0, 0, 0.9563055, 0, 0.2923716, 0, 3014.355, 0, -8143.234, 1" AltitudeMode="GroundLevel" />
      </Marker>
      <Marker SerializationID="8" Name="samI1" TemplateID="66932992621459616" TemplateName="ev12sama" X="1622.362" Y="-8136.474">
        <EntityProperties ParentEntitySetID="1" Description="" />
        <TransformProperties GameMatrix="-0.2923712, 0, 0.9563056, 0, 0, 1, 0, 0, -0.9563056, 0, -0.2923712, 0, 1622.362, 0, -8136.474, 1" AltitudeMode="GroundLevel" />
      </Marker>
      <Marker SerializationID="9" Name="ssamtrig" TemplateID="64079280547853478" TemplateName="EntitySet" X="0" Y="0">
        <EntityProperties ParentEntitySetID="0" Description="" />
        <EntitySetProperties Active="False" Exportable="True" />
      </Marker>
      <Marker SerializationID="10" Name="samtrig" TemplateID="130252823392184388" TemplateName="triggerzone" X="28977.07" Y="-2945.2">
        <EntityProperties ParentEntitySetID="9" Description="" />
        <PolygonProperties Top="1000" Bottom="-1000" AltitudeMode="SeaLevel">
          <Points>
            <Point X="30981.3652" Y="-2945.19922" />
            <Point X="30712.8418" Y="-1943.05115" />
            <Point X="29979.2188" Y="-1209.42773" />
            <Point X="28977.07" Y="-940.9031" />
            <Point X="27974.9219" Y="-1209.42773" />
            <Point X="27241.2988" Y="-1943.05115" />
            <Point X="26972.7734" Y="-2945.19946" />
            <Point X="27241.2988" Y="-3947.348" />
            <Point X="27974.9219" Y="-4680.9707" />
            <Point X="28977.07" Y="-4949.496" />
            <Point X="29979.2188" Y="-4680.9707" />
            <Point X="30712.8418" Y="-3947.347" />
          </Points>
        </PolygonProperties>
      </Marker>
      <Marker SerializationID="11" Name="playera" TemplateID="58976911495555221" TemplateName="iu27useng" X="2274.195" Y="-10200.73">
        <EntityProperties ParentEntitySetID="1" Description="" />
        <AttachmentsProperties>
          <Slots />
        </AttachmentsProperties>
        <CharacterProperties ControlMode="Player" />
        <PersonaProperties Surname="Borchers" Rank="1" HeadTexture="c_head_cau_setG" HeadModel="c_head_cau_07" Voice="Marine05" />
        <GroupMemberProperties />
        <TransformProperties GameMatrix="-0.05233547, 0, 0.9986309, 0, 0, 1, 0, 0, -0.9986309, 0, -0.05233547, 0, 2274.195, 0, -10200.73, 1" AltitudeMode="GroundLevel" />
        <AssignedWaypointProperties AssignedWaypointID="0" />
        <HierarchyProperties ParentEchelonID="0" BaseLeadership="100" ManualLevel="1" TooOnly="False" />
        <AlternateTemplateProperties />
      </Marker>
      <Marker SerializationID="12" Name="vu19ah6jattack" TemplateID="60238299846437084" TemplateName="vu19ah6jattack" X="2260.53" Y="-10201.64">
        <EntityProperties ParentEntitySetID="1" Description="" />
        <AttachmentsProperties>
          <Slots />
        </AttachmentsProperties>
        <GroupMemberProperties />
        <TransformProperties GameMatrix="0.9945216, 0, 0.1045283, 0, 0, 1, 0, 0, -0.1045283, 0, 0.9945216, 0, 2260.53, 0, -10201.64, 1" AltitudeMode="GroundLevel" />
        <VehicleMountProperties VirtualCrew="False" MovingAtStart="False" />
        <AssignedWaypointProperties AssignedWaypointID="0" />
        <AlternateTemplateProperties />
      </Marker>
      <Marker SerializationID="13" Name="samI2" TemplateID="66932992621459616" TemplateName="ev12sama" X="2940.884" Y="-8574.943">
        <EntityProperties ParentEntitySetID="1" Description="" />
        <TransformProperties GameMatrix="-0.9998491, 0, -0.01745197, 0, 0, 1, 0, 0, 0.01745197, 0, -0.9998491, 0, 2940.884, 0, -8574.943, 1" AltitudeMode="GroundLevel" />
      </Marker>
    </Markers>
  </MarkerManager>
</MissionEditor.Mission>